package tkmr;
import java.net.*;
import java.io.*;
import java.util.regex.*;

public class UPnPController{
    private static int BUFFER_SIZE = 100000;
    public static String SSDP_ST_SERVICE   = "urn:schemas-upnp-org:service:WANPPPConnection:1";
    public static String SSDP_ST_IPSERVICE = "urn:schemas-upnp-org:service:WANIPConnection:1";
    public static String SSDP_ST_DEVICE    = "urn:schemas-upnp-org:device:InternetGatewayDevice:1";
    private static String SSDP_HOST = "239.255.255.250";
    private static int SSDP_PORT = 1900;
    private static byte[] SSDP_UDP_REQUEST =
        ("M-SEARCH * HTTP/1.1\r\n" +
         "HOST: 239.255.255.250:1900\r\n" +
         "MAN: \"ssdp:discover\"\r\n" +
         "MX: 1\r\n" +
         "ST: " + SSDP_ST_DEVICE + "\r\n\r\n").getBytes();

    private int usePort;
    private DatagramPacket udpReceivePacket;

    public UPnPController()
    {
    }

    public DatagramPacket discoverRouter() throws SocketTimeoutException, IOException, InterruptedException
    {
        InetSocketAddress remoteAddress = new InetSocketAddress(SSDP_HOST, SSDP_PORT);
        DatagramPacket sendPacket = new DatagramPacket(SSDP_UDP_REQUEST, SSDP_UDP_REQUEST.length, remoteAddress);
        DatagramSocket sendSocket = new DatagramSocket();
        sendSocket.setReuseAddress(true);
        usePort = sendSocket.getLocalPort();

        Thread t2 = new Thread(){
                public void run(){
                    udpReceivePacket = UPnPUtil.listenUDP(usePort, 3000, BUFFER_SIZE);
                }
        };
        t2.start();

        sleep(50);
        sendSocket.send(sendPacket);

        t2.join();
        return udpReceivePacket;
    }

    public String discoverRouterLocation()
    {
        DatagramPacket receivePacket = discoverRouter();
        //TODO: ReceivePacket check
        String udpMessage = new String(receivePacket.getData(), 0, receivePacket.getLength());
        Pattern p = Pattern.compile("LOCATION: (.*)", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(ssdpMessage);
        m.find();
        return m.group(1);
    }
}