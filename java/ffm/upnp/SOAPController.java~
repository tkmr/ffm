package ffm.upnp;
import java.net.*;
import java.io.*;
import java.util.regex.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

import java.rmi.RemoteException;
import javax.xml.namespace.QName;
import javax.xml.rpc.*;
import javax.xml.rpc.handler.*;
//import javax.xml.soap.SOAPBody;
//import javax.xml.soap.SOAPEnvelope;
//import javax.xml.soap.SOAPMessage;

public class SOAPController{
    private final String SSDP_ST_SERVICE   = "urn:schemas-upnp-org:service:WANPPPConnection:1";
    private final String SSDP_ST_IPSERVICE = "urn:schemas-upnp-org:service:WANIPConnection:1";

    private String routerURL;
    public String getRouterURL(){
        return routerURL;
    }

    public SOAPController(String routerLocation) throws MalformedURLException, XPathExpressionException, IOException, SAXException
    {
        routerURL = discoverControlURL(routerLocation);
    }

    public String getExternalIP() throws ServiceException, RemoteException
    {
        Service soapService = ServiceFactory.newInstance().createService(new QName(SSDP_ST_SERVICE, "GetExternalIPAddress"));
        Call call = soapService.createCall();
        call.setOperationName(new QName(SSDP_ST_SERVICE, "GetExternalIPAddress"));
        call.setProperty(Call.OPERATION_STYLE_PROPERTY, "rpc");
        call.setProperty(Call.ENCODINGSTYLE_URI_PROPERTY, "http://schemas.xmlsoap.org/soap/encoding/");
        call.setTargetEndpointAddress(routerURL);
        Object[] args = {};

        System.out.println(call.invoke(args));

        //call.addParameter(
        //                  "isbn",             // parameter name
        //                  XMLType.XSD_STRING, // parameter XML type QName
        //                  String.class,       // parameter Java type class
        //                  ParameterMode.IN);  // parameter mode
        // The return
        //call.setReturnType(XMLType.XSD_FLOAT);
        // The operation is an RPC-style operation.

        return "";
    }

    public String discoverControlURL(String location) throws XPathExpressionException, MalformedURLException, IOException, SAXException
    {
        //TODO: Null check;
        if(location == null){
            return null;
        }

        URL ssdpUrl = new URL(location);
        Document doc = Util.getXMLHttp(ssdpUrl.toString());
        //TODO: Null check;
        if(doc == null){
            return null;
        }

        XPathFactory factory = XPathFactory.newInstance();
        XPath xpath = factory.newXPath();
        NodeList resultNodes = (NodeList)xpath.evaluate("//service/serviceType", doc, XPathConstants.NODESET);

        String content;
        Element parent = null;
        Pattern pattern = Pattern.compile(SSDP_ST_IPSERVICE+"|"+SSDP_ST_SERVICE);
        for(int i = 0; i < resultNodes.getLength(); i++){
            content = resultNodes.item(i).getTextContent();
            if(pattern.matcher(content).find()){
                parent = (Element)resultNodes.item(i).getParentNode();
            }
        }

        if(parent == null){
            return null;
        }

        URL controlURL;
        String controlUrlPath = parent.getElementsByTagName("controlURL").item(0).getTextContent();
        controlURL = new URL(ssdpUrl.getProtocol(), ssdpUrl.getHost(), ssdpUrl.getPort(), controlUrlPath);
        return controlURL.toString();
    }
}